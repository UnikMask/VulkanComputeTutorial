// vim:ft=glsl
#version 460

#define PI 6.28318530718

layout (local_size_x = 32, local_size_y = 32) in;

layout (binding = 0) uniform sampler2D mainRender;
layout (binding = 1) uniform writeonly image2D finalRender;

vec4 getTex(vec2 uv) {
    return texture(mainRender, uv);
}

void main() {
    vec2 resolution = vec2(imageSize(finalRender));
    vec2 uv = vec2(gl_GlobalInvocationID.xy) / resolution;

    float directions = 16.0; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)
    float quality = 4.0; // BLUR QUALITY (Default 4.0 - More is better but slower)
    float size = 6.0; // BLUR SIZE (Radius)
    vec2 radius = size / resolution.xy;
    vec4 fragColor = getTex(uv);

    for (float d = 0.0; d < PI; d += PI / directions) {
        for (float i = 1.0/quality; i <= 1.0; i += 1.0/quality) {
            fragColor += getTex(uv + vec2(cos(d), sin(d)) * radius * i);
        }
     }
    fragColor /= quality * directions - 15.0;
    imageStore(finalRender, ivec2(gl_GlobalInvocationID.xy), fragColor);
}
